#include <iostream>

#include <vector>
#include <map>
#include <iomanip>
#include <limits>
using namespace std;


class Item {
public:
    string code;
    string name;
    string category;
    double price;
    int stock;

    Item(string c, string n, string cat, double p, int s)
        : code(c), name(n), category(cat), price(p), stock(s) {}

    void display() const {
        cout << left << setw(4) << code
             << setw(15) << name
             << setw(12) << category
             << "$" << fixed << setprecision(2) << price
             << " (" << stock << " left)\n";
    }
};


class VendingMachine {
private:
    map<string, Item> items;
    double userBalance;

public:
    VendingMachine() : userBalance(0.0) {
        
        items["A1"] = Item("A1", "cocola", "Drink", £1.50, 5);
        items["A2"] = Item("A2", "water", "Drink", £1.00, 3);
        items["B1"] = Item("B1", "crips", "Snack", £1.25, 4);
        items["B2"] = Item("B2", "mars bar", "Snack", £1.50, 2);
    }

    void displayMenu() const {
        cout << "\n======= Available Items =======\n";
        for (const auto& pair : items) {
            pair.second.display();
        }
        cout << "===============================\n";
        cout << "Current Balance: $" << fixed << setprecision(2) << userBalance << "\n";
    }

    void insertMoney() {
        double amount;
        cout << "Enter amount to insert: $";
        while (!(cin >> amount) || amount <= 0) {
            cout << "Invalid input. Please enter a positive number: $";
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }
        userBalance += amount;
        cout << "Balance updated. Current balance: $" << fixed << setprecision(2) << userBalance << "\n";
    }

    void selectItem() {
        string code;
        cout << "Enter item code to purchase: ";
        cin >> code;

        auto it = items.find(code);
        if (it == items.end()) {
            cout << "Item not found. try again.\n";
            return;
        }

        Item& selected = it->second;
        if (selected.stock <= 0) {
            cout << "Sorry, " << selected.name << " out of stock.\n";
            return;
        }

        if (userBalance < selected.price) {
            cout << "Insufficient funds. Please insert more money.\n";
            return;
        }

     
        selected.stock--;
        userBalance -= selected.price;
        cout << "Dispensing " << selected.name << "...\n";
        suggestItem(selected.category);
    }

    void returnChange() {
        if (userBalance > 0) {
            cout << "Returning change: $" << fixed << setprecision(2) << userBalance << "\n";
            userBalance = 0.0;
        }
    }

    void suggestItem(const string& category) const {
        if (category == "Drink") {
            cout << "Why not try a snack to go with your drink?\n";
        } else if (category == "Snack") {
            cout << "A drink might go well with that!\n";
        }
    }

    void run() {
        int choice;
        do {
            displayMenu();
            cout << "\n1. Insrt Money\n2. Buy Item\n3. Return Change & Exit\n";
            cout << "Enter your choice: ";
            while (!(cin >> choice)) {
                cout << "Invalid input. Please enter a number: ";
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
            }

            switch (choice) {
                case 1:
                    insertMoney();
                    break;
                case 2:
                    selectItem();
                    break;
                case 3:
                    returnChange();
                    cout << "Thank you for using the vending machine!\n";
                    break;
                default:
                    cout << "Please enter a valid option.\n";
            }

        } while (choice != 3);
    }
};


int main() {
    VendingMachine machine;
    machine.run();
    return 0;
}
